diff -buraP fluffos-2.21/ChangeLog.fluffos-2.x fluffos-2.22/ChangeLog.fluffos-2.x
--- fluffos-2.21/ChangeLog.fluffos-2.x	2010-11-08 17:14:28.000000000 -0500
+++ fluffos-2.22/ChangeLog.fluffos-2.x	2011-02-14 16:10:00.000000000 -0500
@@ -2,6 +2,16 @@
 FluffOS :), note: where it says Cratylus, I got it from his version, usually
 someone else did the work, but I don't know how to find who did what there.
 
+FluffOS 2.22
+fixed potential crasher in pcre_extract
+removed limit for number of matches in pcre efuns
+added classes() efun (woom)
+	classes(ob) returns a list of class names available in ob
+	classes(ob, 1) returns the same list, with all the fields in the class (type and name)
+you can now have more than 256 Globals (qwer@lpmuds.net)
+added postgres support (unagi@lpmuds.net)
+fixed zmp crash
+removed some obsolete malloc options
 FluffOS 2.21
 small cleanup in malloc32
 added gmcp support
diff -buraP fluffos-2.21/GNUmakefile.in fluffos-2.22/GNUmakefile.in
--- fluffos-2.21/GNUmakefile.in	2010-11-08 17:14:29.000000000 -0500
+++ fluffos-2.22/GNUmakefile.in	2011-02-14 16:10:01.000000000 -0500
@@ -130,7 +130,7 @@
 
 # the touches here are necessary to fix the modification times; link(2) does
 # 'modify' a file
-files: edit_source sysmalloc.c smalloc.c bsdmalloc.c debugmalloc.c wrappedmalloc.c options.h op_spec.c func_spec.c packages/Makefile.pre packages/GNUmakefile.pre configure.h grammar.y.pre
+files: edit_source sysmalloc.c debugmalloc.c wrappedmalloc.c options.h op_spec.c func_spec.c packages/Makefile.pre packages/GNUmakefile.pre configure.h grammar.y.pre
 	./edit_source -options -malloc -build_func_spec '$(CPP) $(CFLAGS)' \
 	              -process grammar.y.pre
 	./edit_source -process packages/Makefile.pre
diff -buraP fluffos-2.21/comm.c fluffos-2.22/comm.c
--- fluffos-2.21/comm.c	2010-11-08 17:14:30.000000000 -0500
+++ fluffos-2.22/comm.c	2011-02-14 16:10:02.000000000 -0500
@@ -1134,6 +1134,8 @@
                 	if(ip->sb_size > MAX_STRING_LENGTH)
                 		ip->sb_size = MAX_STRING_LENGTH;
                 	ip->sb_buf = (char *)REALLOC(ip->sb_buf, ip->sb_size);
+                    if (ip->sb_pos < ip->sb_size - 1)
+                        ip->sb_buf[ip->sb_pos++] = from[i];
                 }
                 break;
 
@@ -1324,6 +1326,7 @@
                             {
                             	array_t *arr = allocate_array(max_array_size);
                             	ip->sb_buf = (char *)REALLOC(ip->sb_buf, MAX(ip->sb_pos + 2, SB_SIZE));
+                            	ip->sb_size = MAX(ip->sb_pos + 2, SB_SIZE);
                             	ip->sb_buf[ip->sb_pos] = 0;
                             	copy_and_push_string(ip->sb_buf+1);
                             	int off=0;
diff -buraP fluffos-2.21/edit_source.c fluffos-2.22/edit_source.c
--- fluffos-2.21/edit_source.c	2010-11-08 17:14:31.000000000 -0500
+++ fluffos-2.22/edit_source.c	2011-02-14 16:10:03.000000000 -0500
@@ -1123,7 +1123,7 @@
     char *p;
     int apply_number = 0;
 
-    fprintf(out, "/* autogenerated from 'applies' */\n#ifndef APPLIES_H\n#define APPLIES_H\n\nextern char *applies_table[];\n\n/* the folowing must be the first character of __INIT */\n#define APPLY___INIT_SPECIAL_CHAR\t\t'#'\n");
+    fprintf(out, "/* autogenerated from 'applies' */\n#ifndef APPLIES_H\n#define APPLIES_H\n\nextern const char *applies_table[];\n\n/* the folowing must be the first character of __INIT */\n#define APPLY___INIT_SPECIAL_CHAR\t\t'#'\n");
     fprintf(table, "/* autogenerated from 'applies' */\n\nconst char *applies_table[] = {\n");
 
     while (fgets(buf, 8192, f)) {
@@ -1603,6 +1603,12 @@
                 fprintf(stderr, "Cannot find mysql.h, compilation is going to fail miserably.\n");
             }
         }
+        if (lookup_define("USE_POSTGRES")) {
+        	if (!(check_include("USE_POSTGRES", "/usr/include/postgresql/libpq-fe.h"))) {
+        		fprintf(stderr,
+        				"Cannot find libpq-fe.h, compilation is going to fail miserably.\n");
+        	}
+        }
     }
 
     fprintf(yyout, "#define CONFIGURE_VERSION   %i\n\n", CONFIGURE_VERSION);
@@ -1688,7 +1694,11 @@
             fprintf(stderr, "Cannot find libmysqlclient.a, compilation is going to fail miserably\n");
         }
     }
-
+    if (lookup_define("PACKAGE_DB") && lookup_define("USE_POSTGRES")) {
+    	if (!(check_library("-lpq"))) {
+    		fprintf(stderr, "Cannot find libpq.a, compilation is going to fail miserably\n");
+    	}
+    }
     fprintf(yyout, "\n\n");
     close_output_file();
 #endif
diff -buraP fluffos-2.21/icode.c fluffos-2.22/icode.c
--- fluffos-2.21/icode.c	2010-11-08 17:14:32.000000000 -0500
+++ fluffos-2.22/icode.c	2011-02-14 16:10:04.000000000 -0500
@@ -7,6 +7,18 @@
 #include "compiler.h"
 #include "generate.h"
 
+/*
+ * Macro for inserting global variable indices.
+ */
+
+#if CFG_MAX_GLOBAL_VARIABLES <= 256
+#define INS_GLOBAL_INDEX ins_byte
+#elif CFG_MAX_GLOBAL_VARIABLES <= 65536
+#define INS_GLOBAL_INDEX ins_short
+#else
+#error CFG_MAX_GLOBAL_VARIABLES must not be greater than 65536
+#endif
+
 static void ins_real (double);
 static void ins_short (short);
 static void upd_short (int, int, const char *);
@@ -343,7 +355,11 @@
             }
             ins_byte(F_BYTE);
         }
+        if (kind == PUSH_GLOBAL) {
+            INS_GLOBAL_INDEX(value);
+        } else {
         ins_byte(value);
+        }
         return 1;
     }
     return 0;
@@ -403,7 +419,14 @@
         }
         end_pushes();
         ins_byte(expr->v.number);
+
+        if ((expr->v.number == F_GLOBAL) ||
+                (expr->v.number == F_GLOBAL_LVALUE)) {
+            INS_GLOBAL_INDEX(expr->l.number);
+        } else {
         ins_byte(expr->l.number);
+        }
+
         break;
     case NODE_OPCODE_2:
         end_pushes();
@@ -535,6 +558,7 @@
     case NODE_FOREACH:
         {
             int tmp = 0;
+            int left_is_global = 0;
 
             i_generate_node(expr->v.expr);
             end_pushes();
@@ -554,10 +578,32 @@
                     tmp |= FOREACH_REF;
             }
             ins_byte(tmp);
+
+            if (tmp & FOREACH_MAPPING) {
+                if (tmp & FOREACH_LEFT_GLOBAL) {
+                    left_is_global = 1;
+                }
+            } else {
+                if (tmp & FOREACH_RIGHT_GLOBAL) {
+                    left_is_global = 1;
+                }
+            }
+
+            if (left_is_global == 1) {
+                INS_GLOBAL_INDEX(expr->l.expr->l.number);
+            } else {
             ins_byte(expr->l.expr->l.number);
-            if (expr->r.expr)
+            }
+
+            if (expr->r.expr) {
+
+                if (tmp & FOREACH_RIGHT_GLOBAL) {
+                    INS_GLOBAL_INDEX(expr->r.expr->l.number);
+                } else {
                 ins_byte(expr->r.expr->l.number);
         }
+            }
+        }
         break;
     case NODE_CASE_NUMBER:
     case NODE_CASE_STRING:
diff -buraP fluffos-2.21/interpret.c fluffos-2.22/interpret.c
--- fluffos-2.21/interpret.c	2010-11-08 17:14:32.000000000 -0500
+++ fluffos-2.22/interpret.c	2011-02-14 16:10:05.000000000 -0500
@@ -75,6 +75,18 @@
 int stack_in_use_as_temporary = 0;
 #endif
 
+/*
+ * Macro for extracting global variable indices.
+ */
+
+#if CFG_MAX_GLOBAL_VARIABLES <= 256
+#define READ_GLOBAL_INDEX READ_UCHAR
+#elif CFG_MAX_GLOBAL_VARIABLES <= 65536
+#define READ_GLOBAL_INDEX READ_USHORT
+#else
+#error CFG_MAX_GLOBAL_VARIABLES must not be greater than 65536
+#endif
+
 int inter_sscanf (svalue_t *, svalue_t *, svalue_t *, int);
 program_t *current_prog;
 short int caller_type;
@@ -2600,7 +2612,7 @@
           STACK_INC;
           sp->type = T_LVALUE;
           if (flags & FOREACH_LEFT_GLOBAL) {
-            sp->u.lvalue = find_value(EXTRACT_UCHAR(pc++) + variable_index_offset);
+              sp->u.lvalue = find_value((int)(READ_GLOBAL_INDEX(pc) + variable_index_offset));
           } else {
             sp->u.lvalue = fp + EXTRACT_UCHAR(pc++);
           }
@@ -2622,7 +2634,7 @@
         if (flags & FOREACH_RIGHT_GLOBAL) {
           STACK_INC;
           sp->type = T_LVALUE;
-          sp->u.lvalue = find_value((EXTRACT_UCHAR(pc++) + variable_index_offset));
+          sp->u.lvalue = find_value((int)(READ_GLOBAL_INDEX(pc) + variable_index_offset));
         } else if (flags & FOREACH_REF) {
           ref_t *ref = make_ref();
           svalue_t *loc = fp + EXTRACT_UCHAR(pc++);
@@ -3063,7 +3075,7 @@
       {
         svalue_t *s;
 
-        s = find_value((EXTRACT_UCHAR(pc++) + variable_index_offset));
+        s = find_value((int) (READ_GLOBAL_INDEX(pc) + variable_index_offset));
 
         /*
          * If variable points to a destructed object, replace it
@@ -3440,7 +3452,7 @@
     case F_GLOBAL_LVALUE:
       STACK_INC;
       sp->type = T_LVALUE;
-      sp->u.lvalue = find_value((EXTRACT_UCHAR(pc++) +
+      sp->u.lvalue = find_value((int) (READ_GLOBAL_INDEX(pc) +
                                        variable_index_offset));
       break;
     case F_INDEX_LVALUE:
diff -buraP fluffos-2.21/interpret.h fluffos-2.22/interpret.h
--- fluffos-2.21/interpret.h	2010-11-08 17:14:32.000000000 -0500
+++ fluffos-2.22/interpret.h	2011-02-14 16:10:05.000000000 -0500
@@ -37,6 +37,13 @@
 
 #define EXTRACT_UCHAR(p) (*(unsigned char *)(p))
 
+/* GCC's optimiser makes a reasonable job of optimising the READ_USHORT macro.
+ * -- Qwer
+ */
+
+#define READ_UCHAR(p) (*(unsigned char *) (p++))
+#define READ_USHORT(p) (p++, p++, *((unsigned short *) (p - 2)))
+
 /*
  * Control stack element.
  * 'prog' is usually same as 'ob->prog' (current_object), except when
diff -buraP fluffos-2.21/local_options.dw fluffos-2.22/local_options.dw
--- fluffos-2.21/local_options.dw	2010-11-08 17:14:33.000000000 -0500
+++ fluffos-2.22/local_options.dw	2011-02-14 16:10:05.000000000 -0500
@@ -753,7 +753,7 @@
  * 14      16384           256k
  * 16      65536             1M
  */
-#define APPLY_CACHE_BITS 14
+#define APPLY_CACHE_BITS 16
 
 /* CACHE_STATS: define this if you want call_other (apply_low) cache 
  * statistics.  Causes HAS_CACHE_STATS to be defined in all LPC objects.
@@ -813,7 +813,7 @@
 /* MAX_LOCAL: maximum number of local variables allowed per LPC function */
 #define CFG_MAX_LOCAL_VARIABLES		50
 /* Increasing max global vars beyond 256 is not recommended */
-#define CFG_MAX_GLOBAL_VARIABLES         256
+#define CFG_MAX_GLOBAL_VARIABLES         65530
 
 #define CFG_EVALUATOR_STACK_SIZE 	3000000
 #define CFG_COMPILER_STACK_SIZE		600000
@@ -899,4 +899,5 @@
 #undef PACKAGE_CRYPTO
 #undef PACKAGE_SHA1
 #undef DTRACE
+#define PACKAGE_PCRE
 #endif
diff -buraP fluffos-2.21/local_options.dwclone fluffos-2.22/local_options.dwclone
--- fluffos-2.21/local_options.dwclone	2010-11-08 17:14:33.000000000 -0500
+++ fluffos-2.22/local_options.dwclone	2011-02-14 16:10:05.000000000 -0500
@@ -539,7 +539,7 @@
  *   resolution is 1/60 of a second, then any time less than approxmately 15k
  *   microseconds will resolve to zero (0).
  */
-#define PROFILE_FUNCTIONS
+#undef PROFILE_FUNCTIONS
 
 /* NO_BUFFER_TYPE: if this is #define'd then LPC code using the 'buffer'
  *   type won't be allowed to compile (since the 'buffer' type won't be
@@ -732,7 +732,7 @@
  *   comm.c's add_message(). Instead of blindly making this value larger,
  *   your mudlib should be coded to not send huge strings to users.
  */
-#define LARGEST_PRINTABLE_STRING 8192
+#define LARGEST_PRINTABLE_STRING 300000
 
 /* MESSAGE_BUFFER_SIZE: determines the size of the buffer for output that
  *   is sent to users.
@@ -753,7 +753,7 @@
  * 14      16384           256k
  * 16      65536             1M
  */
-#define APPLY_CACHE_BITS 14
+#define APPLY_CACHE_BITS 15
 
 /* CACHE_STATS: define this if you want call_other (apply_low) cache 
  * statistics.  Causes HAS_CACHE_STATS to be defined in all LPC objects.
@@ -818,13 +818,13 @@
  * config file.
  */
 /* MAX_LOCAL: maximum number of local variables allowed per LPC function */
-#define CFG_MAX_LOCAL_VARIABLES		50
+#define CFG_MAX_LOCAL_VARIABLES		250
 /* Increasing max global vars beyond 256 is not recommended */
-#define CFG_MAX_GLOBAL_VARIABLES         256
+#define CFG_MAX_GLOBAL_VARIABLES        65530 
 
 #define CFG_EVALUATOR_STACK_SIZE 	3000000
 #define CFG_COMPILER_STACK_SIZE		600000
-#define CFG_MAX_CALL_DEPTH		150
+#define CFG_MAX_CALL_DEPTH		2500
 /* This must be one of 4, 16, 64, 256, 1024, 4096 */
 #define CFG_LIVING_HASH_SIZE		256
 
@@ -883,5 +883,6 @@
 #define IPV6
 #undef PACKAGE_CRYPTO
 #define PACKAGE_SHA1
-#define DTRACE
+#undef DTRACE
+#define PACKAGE_PCRE
 #endif
Only in fluffos-2.21: malloc.h
diff -buraP fluffos-2.21/my_malloc.h fluffos-2.22/my_malloc.h
--- fluffos-2.21/my_malloc.h	2010-11-08 17:14:34.000000000 -0500
+++ fluffos-2.22/my_malloc.h	2011-02-14 16:10:07.000000000 -0500
@@ -13,32 +13,6 @@
 
 #endif
 
-/* smalloc - choice between replacement or wrapper */
-#if defined(SMALLOC) && !defined(SYSMALLOC)
-#  ifdef SBRK_OK
-#    define smalloc_malloc        malloc
-#    define smalloc_free          free
-#    define smalloc_realloc       realloc
-#    define smalloc_calloc        calloc
-#  else
-#    define MALLOC(x)       smalloc_malloc(x)
-#    define FREE(x)         smalloc_free(x)
-#    define REALLOC(x,y)    smalloc_realloc(x,y)
-#    define CALLOC(x,y)     smalloc_calloc(x,y)
-#  endif
-#endif
-
-/* bsdmalloc - always a replacement */
-#if defined(BSDMALLOC) && !defined(SYSMALLOC)
-#define MALLOC(x)       bsdmalloc_malloc(x)
-#define FREE(x)         bsdmalloc_free(x)
-#define REALLOC(x,y)    bsdmalloc_realloc(x,y)
-#define CALLOC(x,y)     bsdmalloc_calloc(x,y)
-#ifndef _FUNC_SPEC_
-#include "bsdmalloc.h"
-#endif
-#endif
-
 #ifdef MMALLOC 
 #define MALLOC(x)       mmalloc(x)
 #define FREE(x)         mfree(x)
diff -buraP fluffos-2.21/options.h fluffos-2.22/options.h
--- fluffos-2.21/options.h	2010-11-08 17:14:34.000000000 -0500
+++ fluffos-2.22/options.h	2011-02-14 16:10:07.000000000 -0500
@@ -53,25 +53,15 @@
  *   * No statistics.
  *   * SYSMALLOC incurs no additional CPU or memory overhead.
  *
- * SMALLOC:
- *   * Satoria's smalloc.
- *   * Statistics available. (see wrappers and DO_MSTATS)
- *   * Faster than most system mallocs with modest ammount of memory overhead.
- *   * Can fall back onto system malloc if sbrk() not ok.
- *
- * BSDMALLOC:
- *   * BSD (Berkeley Software Distributions) malloc.
- *   * Statistics available. (see wrappers and DO_MSTATS)
- *   * Faster than SMALLOC but more memory overhead.
- *   * Requires sbrk().
  * MALLOC64
  *   * Wodan's malloc, uses system malloc for small allocations and spreads
  *   * large allocations through the 64 bit memory space
  *   * won't work on 32 bit systems.
+ * MALLOC32
+ *   * fixes realloc by always doing a malloc/memcpy/free instead, try this
+ *   * if you use more memory than expected (or MALLOC64 on a 64bit system).
  */
 #define SYSMALLOC
-#undef SMALLOC
-#undef BSDMALLOC
 #undef MMALLOC
 #undef MALLOC64
 #undef MALLOC32
@@ -639,9 +629,8 @@
  */
 #ifdef PACKAGE_DB
 #undef USE_MSQL
-#undef MSQL
 #define USE_MYSQL 2
-#define MY_SQL
+#undef USE_POSTGRES
 #endif
 
 /****************************************************************************
@@ -804,8 +793,12 @@
  */
 /* MAX_LOCAL: maximum number of local variables allowed per LPC function */
 #define CFG_MAX_LOCAL_VARIABLES         50
-/* Increasing max global vars beyond 256 is not recommended */
-#define CFG_MAX_GLOBAL_VARIABLES         256
+
+/* CFG_MAX_GLOBAL_VARIABLES: This value determines the maximum number of
+ *   global variables per object.  The maximum value is 65536.  There is
+ *   a marginal memory increase for a value over 256.
+ */
+#define CFG_MAX_GLOBAL_VARIABLES        65536
 
 #define CFG_EVALUATOR_STACK_SIZE        3000
 #define CFG_COMPILER_STACK_SIZE         600
diff -buraP fluffos-2.21/packages/contrib.c fluffos-2.22/packages/contrib.c
--- fluffos-2.21/packages/contrib.c	2010-04-22 16:06:05.000000000 -0400
+++ fluffos-2.22/packages/contrib.c	2011-01-11 17:31:26.000000000 -0500
@@ -2864,3 +2864,69 @@
 	pop_3_elems();
 }
 #endif
+
+#ifdef F_CLASSES
+void f_classes() {
+   int i, j, num, size, offset, flag;
+   array_t *vec, *subvec, *subsubvec;
+   unsigned short *types;
+   char buf[256];
+   char *end;
+   program_t *prog;
+
+   flag = (sp--)->u.number;
+   end = EndOf( buf );
+
+   prog = sp->u.ob->prog;
+   num = prog->num_classes;
+   vec = allocate_empty_array( num );
+
+   // Pull out data for each class.
+   for( i = 0; i < num; i++ ) {
+      // Do we want additional info on each class?
+      if( flag ) {
+         size = prog->classes[i].size;
+
+         vec->item[i].type = T_ARRAY;
+         subvec = vec->item[i].u.arr = allocate_empty_array( 1 + size );
+
+         // First item of return array: the class's name.
+         subvec->item[0].type = T_STRING;
+         subvec->item[0].subtype = STRING_SHARED;
+         subvec->item[0].u.string = make_shared_string(
+                  prog->strings[prog->classes[i].classname] );
+
+         offset = prog->classes[i].index;
+
+         // Find the name and type of each class member.
+         for( j = 0; j < size; j++, offset++ ) {
+            subvec->item[j + 1].type = T_ARRAY;
+            subsubvec = subvec->item[j + 1].u.arr = allocate_empty_array( 2 );
+
+            // Each subarray contains the member's name...
+            subsubvec->item[0].type = T_STRING;
+            subsubvec->item[0].subtype = STRING_SHARED;
+            subsubvec->item[0].u.string = make_shared_string(
+                     prog->strings[prog->class_members[offset].membername] );
+
+            // ...and type.
+            get_type_name( buf, end, prog->class_members[offset].type );
+            subsubvec->item[1].type = T_STRING;
+            subsubvec->item[1].subtype = STRING_SHARED;
+            subsubvec->item[1].u.string = make_shared_string( buf );
+         }
+      }
+      else {
+         // No additional info. Just pull out the class name.
+         vec->item[i].type = T_STRING;
+         vec->item[i].subtype = STRING_SHARED;
+         vec->item[i].u.string = make_shared_string(
+                  prog->strings[prog->classes[i].classname] );
+      }
+   }
+
+   pop_stack();
+   push_refed_array( vec );
+}
+
+#endif
diff -buraP fluffos-2.21/packages/contrib_spec.c fluffos-2.22/packages/contrib_spec.c
--- fluffos-2.21/packages/contrib_spec.c	2010-01-13 14:30:40.000000000 -0500
+++ fluffos-2.22/packages/contrib_spec.c	2011-01-11 17:31:26.000000000 -0500
@@ -59,3 +59,4 @@
 int remove_get_char(object);
 int send_nullbyte(object);
 void restore_from_string(string, int default:0);
+mixed *classes( object, int default : 0 );
diff -buraP fluffos-2.21/packages/db.c fluffos-2.22/packages/db.c
--- fluffos-2.21/packages/db.c	2010-06-10 16:32:24.000000000 -0400
+++ fluffos-2.22/packages/db.c	2011-02-05 10:19:02.000000000 -0500
@@ -112,6 +112,19 @@
 };
 #endif
 
+#ifdef USE_POSTGRES
+static int      Postgres_connect  (dbconn_t *, const char *, const char *, const char *, const char *);
+static int      Postgres_close    (dbconn_t *);
+static int      Postgres_execute  (dbconn_t *, const char *);
+static array_t *Postgres_fetch    (dbconn_t *, int);
+static void     Postgres_cleanup  (dbconn_t *);
+static char *   Postgres_errormsg (dbconn_t *);
+
+static db_defn_t postgres = {
+  "Postgres", Postgres_connect, Postgres_close, Postgres_execute, Postgres_fetch, NULL, NULL, Postgres_cleanup, NULL, Postgres_errormsg
+};
+#endif
+
 #ifdef USE_SQLITE2
 static int      SQLite2_connect   (dbconn_t *, const char *, const char *, const char *, const char *);
 static int      SQLite2_close     (dbconn_t *);
@@ -320,6 +333,13 @@
 		db->type = &SQLite3;
 		break;
 #endif
+#ifdef USE_POSTGRES
+#if USE_POSTGRES - 0
+	case USE_POSTGRES:
+#endif
+		db->type = &postgres;
+		break;
+#endif
 	}
 
 	if (db->type->connect) {
@@ -1369,3 +1389,104 @@
 	return string_copy((char *)sqlite3_errmsg(c->SQLite3.handle), "SQLite3_errormsg:2");
 }   
 #endif
+ /*
+  * Postgres support
+  */
+#ifdef USE_POSTGRES
+static void Postgres_cleanup (dbconn_t * c)
+{
+	c->postgres.res = 0;
+}
+
+static char *Postgres_errormsg (dbconn_t * c)
+{
+	return string_copy(PQerrorMessage(c->postgres.conn), "postgresql_errormsg");
+}
+
+static int Postgres_close (dbconn_t * c)
+{
+	PQclear(c->postgres.res);
+	PQfinish(c->postgres.conn);
+	return 1;
+}
+
+static int Postgres_execute (dbconn_t * c, const char * s)
+{
+	c->postgres.res = PQexec( c->postgres.conn, s );
+
+	if( (PQresultStatus( c->postgres.res )) == PGRES_TUPLES_OK ) {
+		return PQntuples( c->postgres.res );
+	}
+
+	if( PQresultStatus( c->postgres.res ) == PGRES_COMMAND_OK ) {
+		return 0;
+	}
+
+	fprintf(stderr, "FT: Query failed: \"%s\"\n", PQresultErrorMessage(c->postgres.res));
+	return -1;
+}
+
+static int Postgres_connect (dbconn_t * c, const char * host, const char * database, const char * username, const char * password)
+{
+	int buffsize;
+
+	char *connstr = "host = '%s' dbname = '%s' user = '%s' password = '%s'";
+	buffsize = strlen(connstr) + strlen(host) + strlen(database) + strlen(username) + strlen(password);
+	char *conninfo = malloc(buffsize);
+	if( conninfo != NULL ) {
+		sprintf(conninfo,connstr,host,database,username,password);
+	}
+
+	c->postgres.conn = PQconnectdb( conninfo );
+	free(conninfo);
+
+	if( (PQstatus(c->postgres.conn) != CONNECTION_OK) ) {
+		return 0;
+	}
+	return 1;
+}
+
+static array_t *Postgres_fetch (dbconn_t * c, int row)
+{
+	array_t *v;
+	char * field;
+	unsigned int i, num_fields;
+
+	if (!c->postgres.res) {
+		return &the_null_array;
+	}
+
+	num_fields = PQnfields( c->postgres.res );
+
+	if (row < -1 || row > PQntuples( c->postgres.res )) {
+		return &the_null_array;
+	}
+
+	if (num_fields < 1) {
+		return &the_null_array;
+	}
+
+	if(row==-1) {
+		v = allocate_empty_array(num_fields);
+		for( i = 0;i < num_fields; i++ ) {
+			v->item[i].type = T_STRING;
+			v->item[i].subtype = STRING_MALLOC;
+			v->item[i].u.string = string_copy(PQfname(c->postgres.res,i), "f_db_fetch");
+		}
+	}
+
+	if(row>=0){
+		v = allocate_empty_array(num_fields);
+		for (i = 0;i < num_fields;i++) {
+			if( PQgetisnull(c->postgres.res, row, i) ) {
+				v->item[i] = const0u;
+			} else {
+				v->item[i].type = T_STRING;
+				v->item[i].subtype = STRING_MALLOC;
+				v->item[i].u.string = string_copy(PQgetvalue(c->postgres.res,row,i),"postgres_fetch");
+			}
+		}
+	}
+	return v;
+}
+#endif
diff -buraP fluffos-2.21/packages/db.h fluffos-2.22/packages/db.h
--- fluffos-2.21/packages/db.h	2009-09-01 18:11:12.000000000 -0400
+++ fluffos-2.22/packages/db.h	2011-02-05 10:19:02.000000000 -0500
@@ -3,6 +3,10 @@
 
 #ifdef PACKAGE_DB
 
+#ifdef USE_POSTGRES
+#include "/usr/include/postgresql/libpq-fe.h"
+#endif
+
 #ifdef USE_MSQL
 /* MSQL v2 requires this so that it knows the right prototypes */
 #define _OS_UNIX
@@ -64,7 +68,14 @@
 #include "/usr/include/sqlite3.h"
 #endif
 
+
 typedef union dbconn_u {
+#ifdef USE_POSTGRES
+	struct tmp_postgres {
+		PGconn      *conn;
+		PGresult    *res;
+	} postgres;
+#endif
 #ifdef USE_MSQL
     struct tmp_msql {
         int handle;
diff -buraP fluffos-2.21/packages/pcre.c fluffos-2.22/packages/pcre.c
--- fluffos-2.21/packages/pcre.c	2010-10-31 14:14:10.000000000 -0400
+++ fluffos-2.22/packages/pcre.c	2011-01-15 18:33:59.000000000 -0500
@@ -156,6 +156,8 @@
 	assign_svalue_no_free(&run->pattern, sp);
 	run->subject  = (sp - 1)->u.string;
 	run->s_length = SVALUE_STRLEN(sp - 1);
+	run->ovector = NULL;
+	run->ovecsize = 0;
 
 	if(pcre_magic(run) < 0)
 	{
@@ -167,23 +169,26 @@
 	}
 
 	/* Pop the 2 arguments from the stack */
-	pop_2_elems();
 
 	if (run->rc < 0) /* No match. could do handling of matching errors if wanted */
 	{
+		pop_2_elems();
 		pcre_free_memory(run);
 		push_refed_array(&the_null_array);
 		return;
 	}
-	else if (run->rc > (OVECCOUNT/3 - 1))
+	else if (run->rc > (run->ovecsize/3 - 1))
 	{
-		error("Too many substrings.\n");
+		pop_2_elems();
 		pcre_free_memory(run);
+		error("Too many substrings.\n");
 		return;
 	}
 
 
 	ret = pcre_get_substrings(run);
+	pop_2_elems();
+
 	push_refed_array(ret);
 
 	pcre_free_memory(run);
@@ -202,7 +207,8 @@
 
 	run = CALLOCATE(1, pcre_t, TAG_TEMPORARY, "f_pcre_replace: run");
 
-
+	run->ovector = NULL;
+	run->ovecsize = 0;
 	assign_svalue_no_free(&run->pattern, (sp - 1));
 	run->subject = (sp - 2)->u.string;
 	replacements = sp->u.arr;
@@ -226,7 +232,7 @@
 	}
 
 
-	if (run->rc > (OVECCOUNT/3-1))
+	if (run->rc > (run->ovecsize/3-1))
 	{
 		pcre_free_memory(run);
 		error("Too many substrings.\n");
@@ -272,7 +278,8 @@
 	arg = sp - num_arg + 1;
 
 	run = CALLOCATE(1, pcre_t, TAG_TEMPORARY, "f_pcre_replace: run");
-
+	run->ovector = NULL;
+	run->ovecsize = 0;
 	run->subject = arg->u.string;
 	assign_svalue_no_free(&run->pattern, (arg + 1));
 
@@ -294,7 +301,7 @@
 	}
 
 
-	if (run->rc > (OVECCOUNT/3-1))
+	if (run->rc > (run->ovecsize/3-1))
 	{
 		pcre_free_memory(run);
 		error("Too many substrings.\n");
@@ -379,6 +386,14 @@
 
 static int pcre_local_exec(pcre_t *p)
 {
+	int size;
+	pcre_fullinfo(p->re, NULL, PCRE_INFO_CAPTURECOUNT, &size);
+	size+=2;
+	size *=3;
+	if(p->ovector)
+		FREE(p->ovector);
+	p->ovector = CALLOCATE(size+1, int, TAG_TEMPORARY, "pcre_local_exec"); //too much, but who cares
+	p->ovecsize = size;
 	p->rc = pcre_exec(
 			p->re,
 			NULL,
@@ -391,7 +406,7 @@
 			0,
 #endif
 			p->ovector,
-			OVECCOUNT);
+			size);
 
 	return p->rc;
 }
@@ -432,7 +447,8 @@
 	int ret;
 
 	run = CALLOCATE(1, pcre_t, TAG_TEMPORARY, "pcre_match_single : run");
-
+	run->ovector = NULL;
+	run->ovecsize = 0;
 	assign_svalue_no_free(&run->pattern, pattern);
 	run->subject  = str->u.string;
 	run->s_length = SVALUE_STRLEN(str);
@@ -465,7 +481,8 @@
 		return &the_null_array;
 
 	run = CALLOCATE(1, pcre_t, TAG_TEMPORARY, "pcre_match : run");
-
+	run->ovector = NULL;
+	run->ovecsize = 0;
 	assign_svalue_no_free(&run->pattern, pattern);
 
 	run->re = pcre_get_cached_pattern(&pcre_cache, &run->pattern);
@@ -584,7 +601,8 @@
 		for (i = 0; i < size; i++)
 		{
 			rgpp[i] = CALLOCATE(1, pcre_t, TAG_TEMPORARY, "pcre_assoc : rgpp[i]");
-
+			rgpp[i]->ovector = NULL;
+			rgpp[i]->ovecsize = 0;
 			assign_svalue_no_free(&rgpp[i]->pattern, &pat->item[i]);
 			rgpp[i]->re = pcre_get_cached_pattern(&pcre_cache, &rgpp[i]->pattern);
 
@@ -852,6 +870,8 @@
 static void pcre_free_memory(pcre_t *p)
 {
 	free_svalue(&p->pattern, "pcre_free_memory");
+	if(p->ovector)
+		FREE(p->ovector);
 	FREE(p);
 
 }
diff -buraP fluffos-2.21/packages/pcre.h fluffos-2.22/packages/pcre.h
--- fluffos-2.21/packages/pcre.h	2010-10-19 08:03:08.000000000 -0400
+++ fluffos-2.22/packages/pcre.h	2011-01-15 18:33:59.000000000 -0500
@@ -11,7 +11,6 @@
 */
 #ifndef PCRE_EFUNS
 #define PCRE_EFUNS
-#define OVECCOUNT       99 // Multiple of 3 
 #define PCRE_CACHE_SIZE 256
 
 typedef struct {
@@ -25,7 +24,8 @@
    int find_all;
    int namecount;
    int name_entry_size;
-   int ovector[OVECCOUNT];
+   int *ovector;
+   int ovecsize;
    int rc;
 /* EXTRA */
 } pcre_t;
diff -buraP fluffos-2.21/patchlevel.h fluffos-2.22/patchlevel.h
--- fluffos-2.21/patchlevel.h	2010-11-08 17:14:34.000000000 -0500
+++ fluffos-2.22/patchlevel.h	2011-02-14 16:10:07.000000000 -0500
@@ -1 +1 @@
-#define PATCH_LEVEL "v2.21"
+#define PATCH_LEVEL "v2.22"
diff -buraP fluffos-2.21/socket_err.h fluffos-2.22/socket_err.h
--- fluffos-2.21/socket_err.h	2010-11-08 17:14:35.000000000 -0500
+++ fluffos-2.22/socket_err.h	2011-02-14 16:10:09.000000000 -0500
@@ -3,6 +3,6 @@
 /*
  * socket_err.h
  */
-extern char *error_strings[];
+extern const char *error_strings[];
 
 #endif
